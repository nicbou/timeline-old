# Generated by Django 3.1.2 on 2021-05-02 09:36

from django.db import migrations
from django.db.transaction import atomic
from django.utils.text import slugify

from archive.models import GoogleTakeoutArchive, GpxArchive, JsonArchive, N26CsvArchive, TwitterArchive
from source.models import RedditSource, TwitterSource, HackerNewsSource, FileSystemSource, RssSource, RsyncSource
from timeline.models import Entry


@atomic
def set_key(apps, schema_editor):
    for rsync_source in apps.get_model('source', 'RsyncSource').objects.all():
        for e in Entry.objects.filter(source=f"rsync/{rsync_source.id}"):
            e.source = rsync_source.entry_source
            e.save()

    for filesystem_source in apps.get_model('source', 'FileSystemSource').objects.all():
        if not filesystem_source.key:
            filesystem_source.key = slugify(filesystem_source.path)[-80]
            filesystem_source.save()
        for e in Entry.objects.filter(source=f"filesystem/{filesystem_source.id}"):
            e.source = filesystem_source.entry_source
            e.save()

    for rss_source in apps.get_model('source', 'RssSource').objects.all():
        if not rss_source.key:
            rss_source.key = slugify(rss_source.feed_url)[:80]
            rss_source.save()
        for e in Entry.objects.filter(source=f"rss/{rss_source.id}"):
            e.source = rss_source.entry_source
            e.save()

    for reddit_source in apps.get_model('source', 'RedditSource').objects.all():
        if not reddit_source.key:
            reddit_source.key = reddit_source.reddit_username
            reddit_source.save()
        for e in Entry.objects.filter(source=f"reddit/{reddit_source.id}"):
            e.source = reddit_source.entry_source
            e.save()

    for twitter_source in apps.get_model('source', 'TwitterSource').objects.all():
        if not twitter_source.key:
            twitter_source.key = twitter_source.twitter_username
            twitter_source.save()
        for e in Entry.objects.filter(source=f"twitter/{twitter_source.id}"):
            e.source = twitter_source.entry_source
            e.save()

    for hackernews_source in apps.get_model('source', 'HackerNewsSource').objects.all():
        if not hackernews_source.key:
            hackernews_source.key = hackernews_source.hackernews_username
            hackernews_source.save()
        for e in Entry.objects.filter(source=f"hackernews/{hackernews_source.id}"):
            e.source = hackernews_source.entry_source
            e.save()

    for gpx_archive in apps.get_model('archive', 'GpxArchive').objects.all():
        for e in Entry.objects.filter(source=f"archive/gpx/{gpx_archive.key}"):
            e.source = gpx_archive.entry_source
            e.save()

    for json_archive in apps.get_model('archive', 'JsonArchive').objects.all():
        for e in Entry.objects.filter(source=f"archive/json/{json_archive.key}"):
            e.source = json_archive.entry_source
            e.save()

    for n26_archive in apps.get_model('archive', 'N26CsvArchive').objects.all():
        for e in Entry.objects.filter(source=f"archive/n26/{n26_archive.key}"):
            e.source = n26_archive.entry_source
            e.save()

    for twitter_archive in apps.get_model('archive', 'TwitterArchive').objects.all():
        for e in Entry.objects.filter(source=f"archive/twitter/{twitter_archive.key}"):
            e.source = twitter_archive.entry_source
            e.save()

    for googletakeout_archive in apps.get_model('archive', 'GoogleTakeoutArchive').objects.all():
        for e in Entry.objects.filter(source=f"archive/google/{googletakeout_archive.key}"):
            e.source = googletakeout_archive.entry_source
            e.save()


class Migration(migrations.Migration):

    dependencies = [
        ('source', '0014_auto_20210502_0933'),
    ]

    operations = [
        migrations.RunPython(set_key),
    ]

